// Generated by CoffeeScript 1.7.1
(function() {
  var Bacon, init;

  init = function(Bacon) {
    var addMatchers, addPositiveMatchers, asMatchers, toFieldExtractor, toSimpleExtractor;
    toFieldExtractor = function(f) {
      var partFuncs, parts;
      parts = f.slice(1).split(".");
      partFuncs = Bacon._.map(toSimpleExtractor, parts);
      return function(value) {
        var _i, _len;
        for (_i = 0, _len = partFuncs.length; _i < _len; _i++) {
          f = partFuncs[_i];
          value = f(value);
        }
        return value;
      };
    };
    toSimpleExtractor = function(key) {
      return function(value) {
        if (value == null) {
          return void 0;
        } else {
          return value[key];
        }
      };
    };
    addMatchers = function(apply1, apply2, apply3) {
      var context;
      context = addPositiveMatchers(apply1, apply2, apply3);
      context["not"] = function() {
        var applyNot1, applyNot2, applyNot3;
        applyNot1 = function(f) {
          return apply1(function(a) {
            return !f(a);
          });
        };
        applyNot2 = function(f) {
          return apply2(function(a, b) {
            return !f(a, b);
          });
        };
        applyNot3 = function(f) {
          return apply3(function(val, a, b) {
            return !f(val, a, b);
          });
        };
        return addPositiveMatchers(applyNot1, applyNot2, applyNot3);
      };
      return context;
    };
    addPositiveMatchers = function(apply1, apply2, apply3) {
      var context;
      context = {};
      context["lessThan"] = apply2(function(a, b) {
        return a < b;
      });
      context["lessThanOrEqualTo"] = apply2(function(a, b) {
        return a <= b;
      });
      context["greaterThan"] = apply2(function(a, b) {
        return a > b;
      });
      context["greaterThanOrEqualTo"] = apply2(function(a, b) {
        return a >= b;
      });
      context["equalTo"] = apply2(function(a, b) {
        return a === b;
      });
      context["truthy"] = apply1(function(a) {
        return !!a;
      });
      context["match"] = apply2(function(val, pattern) {
        return pattern.test(val);
      });
      context["inOpenRange"] = apply3(function(val, a, b) {
        return (a < val && val < b);
      });
      context["inClosedRange"] = apply3(function(val, a, b) {
        return (a <= val && val <= b);
      });
      context["containerOf"] = apply2(function(a, b) {
        var aHasAllKeyValuesOfB, bIsNotEmpty, matchingKeyValuePairs;
        if (a instanceof Array || typeof a === 'string') {
          return a.indexOf(b) >= 0;
        } else if (typeof a === 'object') {
          matchingKeyValuePairs = 0;
          Object.keys(b).forEach(function(bKey) {
            var aHasBKeyAndValue;
            aHasBKeyAndValue = a.hasOwnProperty(bKey) && a[bKey] === b[bKey];
            if (aHasBKeyAndValue) {
              return matchingKeyValuePairs += 1;
            }
          });
          aHasAllKeyValuesOfB = matchingKeyValuePairs === Object.keys(b).length;
          bIsNotEmpty = Object.keys(b).length > 0;
          return aHasAllKeyValuesOfB && bIsNotEmpty;
        } else {
          return false;
        }
      });
      return context;
    };
    asMatchers = function(operation, combinator, fieldKey) {
      var apply1, apply2, apply3, field;
      field = fieldKey != null ? toFieldExtractor(fieldKey) : Bacon._.id;
      apply1 = function(f) {
        return function() {
          return operation(function(val) {
            return f(field(val));
          });
        };
      };
      apply2 = function(f) {
        return function(other) {
          if (other instanceof Bacon.Observable) {
            return combinator(other, function(val, other) {
              return f(field(val), other);
            });
          } else {
            return operation(function(val) {
              return f(field(val), other);
            });
          }
        };
      };
      apply3 = function(f) {
        return function(first, second) {
          return operation(function(val) {
            return f(field(val), first, second);
          });
        };
      };
      return addMatchers(apply1, apply2, apply3);
    };
    Bacon.Observable.prototype.is = function(fieldKey) {
      var combinator, context, operation;
      context = this;
      operation = function(f) {
        return context.map(f);
      };
      combinator = function(observable, f) {
        return context.combine(observable, f);
      };
      return asMatchers(operation, combinator, fieldKey);
    };
    Bacon.Observable.prototype.where = function(fieldKey) {
      var combinator, context, operation;
      context = this;
      operation = function(f) {
        return context.filter(f);
      };
      combinator = function(observable, f) {
        return context.filter(context.combine(observable, f));
      };
      return asMatchers(operation, combinator, fieldKey);
    };
    return Bacon;
  };

  if (typeof module !== "undefined" && module !== null) {
    Bacon = require("baconjs");
    module.exports = init(Bacon);
  } else {
    if (typeof require === "function") {
      define("bacon.matchers", ["bacon"], init);
    } else {
      init(this.Bacon);
    }
  }

}).call(this);
